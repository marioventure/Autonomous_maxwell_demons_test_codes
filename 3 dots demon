# -*- coding: utf-8 -*-
"""
Created on Tue May 28 23:08:40 2024

@author: mdrc0
"""

import numpy as np
from scipy.integrate import odeint
import  matplotlib.pyplot as plt
import matplotlib.ticker as ticker
from matplotlib.ticker import ScalarFormatter

def p_d(p):
    return np.transpose(np.array([p[:,0]+p[:,3], p[:,1]+p[:,4], p[:,2]+p[:,5]]))
def p_s(p):
    return np.transpose(np.array([p[:,0]+p[:,1]+p[:,2], p[:,3]+p[:,4]+p[:,5]]))
def corrtdf(i): #relates state i of the total system (s+d) 0,1,2,3,4,5 to state of the demon
    if i==0 or i==3:
        return 0
    if i==1 or i==4:
        return 1
    if i==2 or i==5:
        return 2
def corrtsf(i): #relates state i of the total system (s+d) 0,1,2,3,4,5 to state of the system (SET)
    if i==0 or i==1 or i==2:
        return 0
    if i==3 or i==4 or i==5:
        return 1
    
def I(p):
    
    p_daux=p_d(p)
    p_saux=p_s(p)
    I_aux=0
    for i in range(6):
        I_aux+=p[:,i]*np.log(p[:,i]/(p_daux[:,corrtdf(i)]*p_saux[:,corrtsf(i)]))
    return I_aux

tstar=100
numdt=1000
t=np.linspace(0,tstar,numdt)
dt=t[1]-t[0]
#e=k_b=1

#The first block of constants are the variables one can choose freely. 
#The lower block of constants ensures the desired relations between the
#variables are satisfied. Not for all values of the first block one can extract work

T_s=1
V=1000
delta_l=10


T_c=T_s/100        
T_h=1.2*T_s
beta_s=1/T_s
beta_c=1/T_c
beta_h=1/T_h
epsilon_s=0
xi_c=-0.4*T_s
xi_h=0
mu_l=-V/2
mu_r=V/2
xi_l=epsilon_s-mu_l
xi_r=epsilon_s-mu_r
U=1.4*T_s
Delta=0.8*T_s
Gamma=0.1*T_s
Gamma_c=100*Gamma
Gamma_h=100*Gamma
Gamma_l=Gamma
Gamma_r=Gamma
delta_r=delta_l
delta=delta_l

#normalization constants
I_max=np.log(2)
Power_norm=V/tstar
Time_norm=tstar

def fermi(beta, xi, boolU):
    return 1/(1+np.exp(beta*(xi+boolU*U)))

f_c_0=fermi(beta_c,xi_c,0)
f_c_1=fermi(beta_c,xi_c,1)
f_h_0=fermi(beta_h,xi_h,0)
f_h_1=fermi(beta_h,xi_h,1)
f_l=fermi(beta_s,xi_l,1)
f_r=fermi(beta_s,xi_l,1)

W_L=W=np.array([[0,0,0,0,0,0],[0,-Gamma_l*f_l,0,0,Gamma_l*(1-f_l),0],[0,0,-Gamma_l*np.exp(-delta_l)*f_l,0,0,Gamma_l*np.exp(-delta_l)*(1-f_l)],[0,0,0,0,0,0],[0,Gamma_l*f_l,0,0,-Gamma_l*(1-f_l),0],[0,0,Gamma_l*np.exp(-delta_l)*f_l,0,0,-Gamma_l*np.exp(-delta_l)*(1-f_l)]])
W_R=W=np.array([[0,0,0,0,0,0],[0,-Gamma_r*np.exp(-delta_r)*f_r,0,0,Gamma_r*np.exp(-delta_r)*(1-f_r),0],[0,0,-Gamma_r*f_r,0,0,Gamma_r*(1-f_r)],[0,0,0,0,0,0],[0,Gamma_r*np.exp(-delta_r)*f_r,0,0,-Gamma_r*np.exp(-delta_r)*(1-f_r),0],[0,0,Gamma_r*f_r,0,0,-Gamma_r*(1-f_r)]])
W_C=np.array([[-Gamma_c*f_c_0,Gamma_c*(1-f_c_0),0,0,0,0],[Gamma_c*f_c_0,-Gamma_c*(1-f_c_0),0,0,0,0],[0,0,0,0,0,0],[0,0,0,-Gamma_c*f_c_1,Gamma_c*(1-f_c_1),0],[0,0,0,Gamma_c*f_c_1,-Gamma_c*(1-f_c_1),0],[0,0,0,0,0,0]])
W_H=np.array([[-Gamma_h*f_h_0,0,Gamma_h*(1-f_h_0),0,0,0],[0,0,0,0,0,0],[Gamma_h*f_h_0,0,-Gamma_h*(1-f_h_0),0,0,0],[0,0,0,-Gamma_h*f_h_1,0,Gamma_h*(1-f_h_1)],[0,0,0,0,0,0],[0,0,0,Gamma_h*f_h_1,0,-Gamma_h*(1-f_h_1)]])

W=W_L+W_R+W_C+W_H
W_arr=np.array([W_L,W_R,W_C,W_H])

p0_0=1/2
p1_0=1-p0_0
pE_0=1/3
pC_0=1/3
pH_0=1-pE_0-pC_0

p0E_0, p0C_0, p0H_0, p1E_0, p1C_0, p1H_0 = p0_0*pE_0, p0_0*pC_0, p0_0*pH_0, p1_0*pE_0, p1_0*pC_0, p1_0*pH_0 #initial conditions
p0 = np.array([p0E_0, p0C_0, p0H_0, p1E_0, p1C_0, p1H_0])

def dp_dt(P, t):
    return np.dot(W, P)

p_old = odeint(dp_dt, p0, t)

#Decorrelation INTERVENTION

for i in range(6):
    p0[i]=p_d(p_old)[-1,corrtdf(i)]*p_s(p_old)[-1,corrtsf(i)]
    
p_new=odeint(dp_dt,p0,t)


    

#Steady state stuff

# Compute eigenvalues and eigenvectors
eigenvalues, eigenvectors = np.linalg.eig(W)
# Find the index of eigenvalue 0
zero_eigenvalue_index = np.where(np.isclose(eigenvalues, 0))[0]
# Get the eigenvectors corresponding to eigenvalue 0
eigenvector_zero = eigenvectors[:, zero_eigenvalue_index]
eigenvector_zero=eigenvector_zero/(np.sum(eigenvector_zero))
#Calculate dotW @ ss
p_ss=np.zeros(6)
for i in range(6):
   p_ss[i]=eigenvector_zero[i][0]
p_ss_array=np.tile(p_ss, (105, 1))

def N(x): #number of particles for the state of s+d 0,...,5
    if x==0:
        return 0
    if x==1 or x==2 or x==3:
        return 1
    if x==4 or x==5:
        return 2
def I_nu_M_xxprime(x,xprime,nu,p):
    return (N(x)-N(xprime))*(W_arr[nu][x][xprime]*p[:,xprime]-W_arr[nu][xprime][x]*p[:,x])
def P(p): #notice that this is actually -P. it was written like this for simplicity, to not have to write minusP every time
    I_R_aux=0 
    x = 0
    xprime = 1
    while x<6:
        while xprime<6:
            I_R_aux+=I_nu_M_xxprime(x,xprime,1,p)
            xprime+=1
        x+=1
        xprime=x+1
    
    return -V*I_R_aux

a=20
b=1000
p_old_last=p_old[-a:,:]
p_new_first=p_new[:b,:]
t_old_last=t[-a:]
t_new_first=t[:b]+tstar
t_aroundtstar=np.concatenate((t_old_last,t_new_first))
p_aroundtstar=np.concatenate((p_old_last,p_new_first),axis=0)
I_aroundtstar=I(p_aroundtstar)
P_aroundtstar=P(p_aroundtstar)
P_ss=P(p_ss_array)[-1]

#eta_1 eta_2

P_new=P(p_new)

eta_1=P_new[0]/P_aroundtstar[-1]

W_true=0
for i in range(numdt):
    W_true+=P_new[i]*dt

def DeltaE(p_1,p_2): #change in energy due to the decorrelation
    return U*(p_2[4]-p_1[4])+U*(p_2[5]-p_1[5])

W_lost=P_ss*tstar-W_true

DeltaE=DeltaE(p_old[-1,:],p_new[0,:])
eta_2=np.abs(DeltaE/W_lost)



#arrays to plot

t_aroundtstar_norm=t_aroundtstar/Time_norm
I_aroundtstar_norm=I_aroundtstar/I_max
P_aroundtstar_norm=P_aroundtstar/Power_norm
P_ss_norm=P_ss/Power_norm



# Create the figure and the primary axes
fig, ax1 = plt.subplots()

# Plot the first dataset on the primary axes
ax1.plot(t_aroundtstar_norm, I_aroundtstar_norm, label=r"$I[I_{Max}]$", color='blue')
ax1.set_xlabel(r'$Time[t^{\ast}]$')
ax1.set_ylabel(r"$I[I_{Max}]$", color='blue')
ax1.tick_params(axis='y')

# Set limits in first y-axis
max_value_I = max(I_aroundtstar_norm)
#ax1.set_ylim(bottom=0, top=max_value_I + max_value_I / 5)

# Create a twin axes sharing the same x-axis
ax2 = ax1.twinx()

# Plot the second dataset on the twin axes
ax2.plot(t_aroundtstar_norm, P_aroundtstar_norm, color='darkorange')
ax2.set_ylabel(r'$-P[V/t^{\ast}]$', color='darkorange')
ax2.tick_params(axis='y')

# Set the secondary y-axis limits
#max_value_W = max(P_aroundtstar_norm)
#ax2.set_ylim(bottom=0, top=max_value_W + max_value_W / 5)


# Add a horizontal line to the primary axes
ax2.axhline(y=P_aroundtstar_norm[0], color='darkorange', linestyle='--')
ax2.set_ylim(bottom=0)

#Use scientific notation for the right y-axis
formatter = ScalarFormatter(useMathText=True)
formatter.set_scientific(True)
formatter.set_powerlimits((-1, 1))
ax2.yaxis.set_major_formatter(formatter)

# Combine legends from both axes
# plt.legend(title=r"$\beta_s = $" + str(beta_s))
eta_1_round=round(eta_1,2)
eta_2_round=round(eta_2,10)
legend = plt.legend(title=r"$\eta_1 = $" + str(eta_1_round)+'\n'+r"$\eta_2 = $"+str(eta_2_round), fontsize='large', loc='lower right')
plt.setp(legend.get_title(), fontsize='large')

# Save the figure
filename = f'I&P_betaS_{beta_s:.3f}_V_{V:.3f}.png'
#plt.savefig(filename, dpi=300, bbox_inches='tight')
plt.show()
